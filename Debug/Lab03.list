
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002878  08002878  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002878  08002878  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002878  08002878  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000002c  080028ac  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080028ac  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095cb  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b62  00000000  00000000  00029620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f10  00000000  00000000  0002c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17a  00000000  00000000  000433d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082250  00000000  00000000  0004f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000d17f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002840 	.word	0x08002840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002840 	.word	0x08002840

0800014c <getKeyInput1>:
int button1_count = 0;
int button2_count = 0;
int button3_count = 0;

void getKeyInput1()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET)
 8000150:	2120      	movs	r1, #32
 8000152:	480c      	ldr	r0, [pc, #48]	; (8000184 <getKeyInput1+0x38>)
 8000154:	f001 fb34 	bl	80017c0 <HAL_GPIO_ReadPin>
 8000158:	4603      	mov	r3, r0
 800015a:	2b00      	cmp	r3, #0
 800015c:	d10c      	bne.n	8000178 <getKeyInput1+0x2c>
	{
		button1_count++;
 800015e:	4b0a      	ldr	r3, [pc, #40]	; (8000188 <getKeyInput1+0x3c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	3301      	adds	r3, #1
 8000164:	4a08      	ldr	r2, [pc, #32]	; (8000188 <getKeyInput1+0x3c>)
 8000166:	6013      	str	r3, [r2, #0]
		if(button1_count == 40 / TICK)
 8000168:	4b07      	ldr	r3, [pc, #28]	; (8000188 <getKeyInput1+0x3c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b04      	cmp	r3, #4
 800016e:	d106      	bne.n	800017e <getKeyInput1+0x32>
		{
			button1_flag = 1;
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <getKeyInput1+0x40>)
 8000172:	2201      	movs	r2, #1
 8000174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		button1_count = 0;
	}
}
 8000176:	e002      	b.n	800017e <getKeyInput1+0x32>
		button1_count = 0;
 8000178:	4b03      	ldr	r3, [pc, #12]	; (8000188 <getKeyInput1+0x3c>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010800 	.word	0x40010800
 8000188:	20000054 	.word	0x20000054
 800018c:	20000048 	.word	0x20000048

08000190 <getKeyInput2>:

void getKeyInput2()
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET)
 8000194:	2140      	movs	r1, #64	; 0x40
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <getKeyInput2+0x38>)
 8000198:	f001 fb12 	bl	80017c0 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d10c      	bne.n	80001bc <getKeyInput2+0x2c>
    {
        button2_count++;
 80001a2:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <getKeyInput2+0x3c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	4a08      	ldr	r2, [pc, #32]	; (80001cc <getKeyInput2+0x3c>)
 80001aa:	6013      	str	r3, [r2, #0]
        if(button2_count == (40 / TICK))
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <getKeyInput2+0x3c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b04      	cmp	r3, #4
 80001b2:	d106      	bne.n	80001c2 <getKeyInput2+0x32>
        {
            button2_flag = 1;
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <getKeyInput2+0x40>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        button2_count = 0;
    }
}
 80001ba:	e002      	b.n	80001c2 <getKeyInput2+0x32>
        button2_count = 0;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <getKeyInput2+0x3c>)
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800
 80001cc:	20000058 	.word	0x20000058
 80001d0:	2000004c 	.word	0x2000004c

080001d4 <getKeyInput3>:
	}
}
*/

void getKeyInput3()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_RESET)
 80001d8:	2180      	movs	r1, #128	; 0x80
 80001da:	480c      	ldr	r0, [pc, #48]	; (800020c <getKeyInput3+0x38>)
 80001dc:	f001 faf0 	bl	80017c0 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d10c      	bne.n	8000200 <getKeyInput3+0x2c>
	{
		button3_count++;
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <getKeyInput3+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <getKeyInput3+0x3c>)
 80001ee:	6013      	str	r3, [r2, #0]
		if(button3_count == 40 / TICK)
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <getKeyInput3+0x3c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b04      	cmp	r3, #4
 80001f6:	d106      	bne.n	8000206 <getKeyInput3+0x32>
		{
			button3_flag = 1;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <getKeyInput3+0x40>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		button3_count = 0;
	}
}
 80001fe:	e002      	b.n	8000206 <getKeyInput3+0x32>
		button3_count = 0;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <getKeyInput3+0x3c>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800
 8000210:	2000005c 	.word	0x2000005c
 8000214:	20000050 	.word	0x20000050

08000218 <display7SEG1>:
int enabled_7SEG = EN0;
int countdown0 = 0;
int countdown1 = 0;

void display7SEG1(int num)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(num < 0 || num > 9) return;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	f2c0 808a 	blt.w	800033c <display7SEG1+0x124>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b09      	cmp	r3, #9
 800022c:	f300 8086 	bgt.w	800033c <display7SEG1+0x124>
	if(num == 1 || num == 4) HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d002      	beq.n	800023c <display7SEG1+0x24>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b04      	cmp	r3, #4
 800023a:	d105      	bne.n	8000248 <display7SEG1+0x30>
 800023c:	2201      	movs	r2, #1
 800023e:	2101      	movs	r1, #1
 8000240:	4840      	ldr	r0, [pc, #256]	; (8000344 <display7SEG1+0x12c>)
 8000242:	f001 fad4 	bl	80017ee <HAL_GPIO_WritePin>
 8000246:	e004      	b.n	8000252 <display7SEG1+0x3a>
	else HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2101      	movs	r1, #1
 800024c:	483d      	ldr	r0, [pc, #244]	; (8000344 <display7SEG1+0x12c>)
 800024e:	f001 face 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 5 || num == 6) HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b05      	cmp	r3, #5
 8000256:	d002      	beq.n	800025e <display7SEG1+0x46>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b06      	cmp	r3, #6
 800025c:	d105      	bne.n	800026a <display7SEG1+0x52>
 800025e:	2201      	movs	r2, #1
 8000260:	2102      	movs	r1, #2
 8000262:	4838      	ldr	r0, [pc, #224]	; (8000344 <display7SEG1+0x12c>)
 8000264:	f001 fac3 	bl	80017ee <HAL_GPIO_WritePin>
 8000268:	e004      	b.n	8000274 <display7SEG1+0x5c>
	else HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2102      	movs	r1, #2
 800026e:	4835      	ldr	r0, [pc, #212]	; (8000344 <display7SEG1+0x12c>)
 8000270:	f001 fabd 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 2) HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d105      	bne.n	8000286 <display7SEG1+0x6e>
 800027a:	2201      	movs	r2, #1
 800027c:	2104      	movs	r1, #4
 800027e:	4831      	ldr	r0, [pc, #196]	; (8000344 <display7SEG1+0x12c>)
 8000280:	f001 fab5 	bl	80017ee <HAL_GPIO_WritePin>
 8000284:	e004      	b.n	8000290 <display7SEG1+0x78>
	else HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	2104      	movs	r1, #4
 800028a:	482e      	ldr	r0, [pc, #184]	; (8000344 <display7SEG1+0x12c>)
 800028c:	f001 faaf 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 1 || num == 4 || num == 7) HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d005      	beq.n	80002a2 <display7SEG1+0x8a>
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b04      	cmp	r3, #4
 800029a:	d002      	beq.n	80002a2 <display7SEG1+0x8a>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b07      	cmp	r3, #7
 80002a0:	d105      	bne.n	80002ae <display7SEG1+0x96>
 80002a2:	2201      	movs	r2, #1
 80002a4:	2108      	movs	r1, #8
 80002a6:	4827      	ldr	r0, [pc, #156]	; (8000344 <display7SEG1+0x12c>)
 80002a8:	f001 faa1 	bl	80017ee <HAL_GPIO_WritePin>
 80002ac:	e004      	b.n	80002b8 <display7SEG1+0xa0>
	else HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2108      	movs	r1, #8
 80002b2:	4824      	ldr	r0, [pc, #144]	; (8000344 <display7SEG1+0x12c>)
 80002b4:	f001 fa9b 	bl	80017ee <HAL_GPIO_WritePin>
	if(num % 2 == 1 || num == 4) HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	bfb8      	it	lt
 80002c2:	425b      	neglt	r3, r3
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d002      	beq.n	80002ce <display7SEG1+0xb6>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d105      	bne.n	80002da <display7SEG1+0xc2>
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	481c      	ldr	r0, [pc, #112]	; (8000344 <display7SEG1+0x12c>)
 80002d4:	f001 fa8b 	bl	80017ee <HAL_GPIO_WritePin>
 80002d8:	e004      	b.n	80002e4 <display7SEG1+0xcc>
	else HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2110      	movs	r1, #16
 80002de:	4819      	ldr	r0, [pc, #100]	; (8000344 <display7SEG1+0x12c>)
 80002e0:	f001 fa85 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 1 || num == 2 || num == 3 || num == 7) HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d008      	beq.n	80002fc <display7SEG1+0xe4>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d005      	beq.n	80002fc <display7SEG1+0xe4>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d002      	beq.n	80002fc <display7SEG1+0xe4>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d105      	bne.n	8000308 <display7SEG1+0xf0>
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	4810      	ldr	r0, [pc, #64]	; (8000344 <display7SEG1+0x12c>)
 8000302:	f001 fa74 	bl	80017ee <HAL_GPIO_WritePin>
 8000306:	e004      	b.n	8000312 <display7SEG1+0xfa>
	else HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <display7SEG1+0x12c>)
 800030e:	f001 fa6e 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 0 || num == 1 || num == 7) HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <display7SEG1+0x10c>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d002      	beq.n	8000324 <display7SEG1+0x10c>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b07      	cmp	r3, #7
 8000322:	d105      	bne.n	8000330 <display7SEG1+0x118>
 8000324:	2201      	movs	r2, #1
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	4806      	ldr	r0, [pc, #24]	; (8000344 <display7SEG1+0x12c>)
 800032a:	f001 fa60 	bl	80017ee <HAL_GPIO_WritePin>
 800032e:	e006      	b.n	800033e <display7SEG1+0x126>
	else HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <display7SEG1+0x12c>)
 8000336:	f001 fa5a 	bl	80017ee <HAL_GPIO_WritePin>
 800033a:	e000      	b.n	800033e <display7SEG1+0x126>
	if(num < 0 || num > 9) return;
 800033c:	bf00      	nop
}
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010c00 	.word	0x40010c00

08000348 <display7SEG2>:

void display7SEG2(int num)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	if(num < 0 || num > 9) return;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	f2c0 8096 	blt.w	8000484 <display7SEG2+0x13c>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b09      	cmp	r3, #9
 800035c:	f300 8092 	bgt.w	8000484 <display7SEG2+0x13c>
	if(num == 1 || num == 4) HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d002      	beq.n	800036c <display7SEG2+0x24>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d105      	bne.n	8000378 <display7SEG2+0x30>
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	4846      	ldr	r0, [pc, #280]	; (800048c <display7SEG2+0x144>)
 8000372:	f001 fa3c 	bl	80017ee <HAL_GPIO_WritePin>
 8000376:	e004      	b.n	8000382 <display7SEG2+0x3a>
	else HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	4843      	ldr	r0, [pc, #268]	; (800048c <display7SEG2+0x144>)
 800037e:	f001 fa36 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 5 || num == 6) HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b05      	cmp	r3, #5
 8000386:	d002      	beq.n	800038e <display7SEG2+0x46>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b06      	cmp	r3, #6
 800038c:	d106      	bne.n	800039c <display7SEG2+0x54>
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	483d      	ldr	r0, [pc, #244]	; (800048c <display7SEG2+0x144>)
 8000396:	f001 fa2a 	bl	80017ee <HAL_GPIO_WritePin>
 800039a:	e005      	b.n	80003a8 <display7SEG2+0x60>
	else HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	483a      	ldr	r0, [pc, #232]	; (800048c <display7SEG2+0x144>)
 80003a4:	f001 fa23 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 2) HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d106      	bne.n	80003bc <display7SEG2+0x74>
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b4:	4835      	ldr	r0, [pc, #212]	; (800048c <display7SEG2+0x144>)
 80003b6:	f001 fa1a 	bl	80017ee <HAL_GPIO_WritePin>
 80003ba:	e005      	b.n	80003c8 <display7SEG2+0x80>
	else HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c2:	4832      	ldr	r0, [pc, #200]	; (800048c <display7SEG2+0x144>)
 80003c4:	f001 fa13 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 1 || num == 4 || num == 7) HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d005      	beq.n	80003da <display7SEG2+0x92>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d002      	beq.n	80003da <display7SEG2+0x92>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b07      	cmp	r3, #7
 80003d8:	d106      	bne.n	80003e8 <display7SEG2+0xa0>
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	482a      	ldr	r0, [pc, #168]	; (800048c <display7SEG2+0x144>)
 80003e2:	f001 fa04 	bl	80017ee <HAL_GPIO_WritePin>
 80003e6:	e005      	b.n	80003f4 <display7SEG2+0xac>
	else HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	4827      	ldr	r0, [pc, #156]	; (800048c <display7SEG2+0x144>)
 80003f0:	f001 f9fd 	bl	80017ee <HAL_GPIO_WritePin>
	if(num % 2 == 1 || num == 4) HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	bfb8      	it	lt
 80003fe:	425b      	neglt	r3, r3
 8000400:	2b01      	cmp	r3, #1
 8000402:	d002      	beq.n	800040a <display7SEG2+0xc2>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d106      	bne.n	8000418 <display7SEG2+0xd0>
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	481e      	ldr	r0, [pc, #120]	; (800048c <display7SEG2+0x144>)
 8000412:	f001 f9ec 	bl	80017ee <HAL_GPIO_WritePin>
 8000416:	e005      	b.n	8000424 <display7SEG2+0xdc>
	else HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041e:	481b      	ldr	r0, [pc, #108]	; (800048c <display7SEG2+0x144>)
 8000420:	f001 f9e5 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 1 || num == 2 || num == 3 || num == 7) HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d008      	beq.n	800043c <display7SEG2+0xf4>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b02      	cmp	r3, #2
 800042e:	d005      	beq.n	800043c <display7SEG2+0xf4>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b03      	cmp	r3, #3
 8000434:	d002      	beq.n	800043c <display7SEG2+0xf4>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b07      	cmp	r3, #7
 800043a:	d106      	bne.n	800044a <display7SEG2+0x102>
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000442:	4812      	ldr	r0, [pc, #72]	; (800048c <display7SEG2+0x144>)
 8000444:	f001 f9d3 	bl	80017ee <HAL_GPIO_WritePin>
 8000448:	e005      	b.n	8000456 <display7SEG2+0x10e>
	else HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	480e      	ldr	r0, [pc, #56]	; (800048c <display7SEG2+0x144>)
 8000452:	f001 f9cc 	bl	80017ee <HAL_GPIO_WritePin>
	if(num == 0 || num == 1 || num == 7) HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d005      	beq.n	8000468 <display7SEG2+0x120>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d002      	beq.n	8000468 <display7SEG2+0x120>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b07      	cmp	r3, #7
 8000466:	d106      	bne.n	8000476 <display7SEG2+0x12e>
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <display7SEG2+0x144>)
 8000470:	f001 f9bd 	bl	80017ee <HAL_GPIO_WritePin>
 8000474:	e007      	b.n	8000486 <display7SEG2+0x13e>
	else HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <display7SEG2+0x144>)
 800047e:	f001 f9b6 	bl	80017ee <HAL_GPIO_WritePin>
 8000482:	e000      	b.n	8000486 <display7SEG2+0x13e>
	if(num < 0 || num > 9) return;
 8000484:	bf00      	nop
}
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010c00 	.word	0x40010c00

08000490 <display_7SEG_automatic>:

void display_7SEG_automatic()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	switch(enabled_7SEG)
 8000494:	4b40      	ldr	r3, [pc, #256]	; (8000598 <display_7SEG_automatic+0x108>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <display_7SEG_automatic+0x12>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d03b      	beq.n	8000518 <display_7SEG_automatic+0x88>
			enabled_7SEG = EN0;
			countdown1--;
		}
		break;
	default:
		break;
 80004a0:	e078      	b.n	8000594 <display_7SEG_automatic+0x104>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	483c      	ldr	r0, [pc, #240]	; (800059c <display_7SEG_automatic+0x10c>)
 80004aa:	f001 f9a0 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b4:	4839      	ldr	r0, [pc, #228]	; (800059c <display_7SEG_automatic+0x10c>)
 80004b6:	f001 f99a 	bl	80017ee <HAL_GPIO_WritePin>
		display7SEG1(countdown0 / 10);
 80004ba:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <display_7SEG_automatic+0x110>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a39      	ldr	r2, [pc, #228]	; (80005a4 <display_7SEG_automatic+0x114>)
 80004c0:	fb82 1203 	smull	r1, r2, r2, r3
 80004c4:	1092      	asrs	r2, r2, #2
 80004c6:	17db      	asrs	r3, r3, #31
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea4 	bl	8000218 <display7SEG1>
		display7SEG2(countdown0 % 10);
 80004d0:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <display_7SEG_automatic+0x110>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <display_7SEG_automatic+0x114>)
 80004d6:	fb83 1302 	smull	r1, r3, r3, r2
 80004da:	1099      	asrs	r1, r3, #2
 80004dc:	17d3      	asrs	r3, r2, #31
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	440b      	add	r3, r1
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	1ad1      	subs	r1, r2, r3
 80004ea:	4608      	mov	r0, r1
 80004ec:	f7ff ff2c 	bl	8000348 <display7SEG2>
		if(timer3_flag == 1)
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <display_7SEG_automatic+0x118>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d14a      	bne.n	800058e <display_7SEG_automatic+0xfe>
			timer3_flag = 0;
 80004f8:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <display_7SEG_automatic+0x118>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
			set_timer3(500);
 80004fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000502:	f000 fd55 	bl	8000fb0 <set_timer3>
			enabled_7SEG = EN1;
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <display_7SEG_automatic+0x108>)
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
			countdown0--;
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <display_7SEG_automatic+0x110>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a23      	ldr	r2, [pc, #140]	; (80005a0 <display_7SEG_automatic+0x110>)
 8000514:	6013      	str	r3, [r2, #0]
		break;
 8000516:	e03a      	b.n	800058e <display_7SEG_automatic+0xfe>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <display_7SEG_automatic+0x10c>)
 8000520:	f001 f965 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	481c      	ldr	r0, [pc, #112]	; (800059c <display_7SEG_automatic+0x10c>)
 800052c:	f001 f95f 	bl	80017ee <HAL_GPIO_WritePin>
		display7SEG1(countdown1 / 10);
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <display_7SEG_automatic+0x11c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <display_7SEG_automatic+0x114>)
 8000536:	fb82 1203 	smull	r1, r2, r2, r3
 800053a:	1092      	asrs	r2, r2, #2
 800053c:	17db      	asrs	r3, r3, #31
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe69 	bl	8000218 <display7SEG1>
		display7SEG2(countdown1 % 10);
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <display_7SEG_automatic+0x11c>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <display_7SEG_automatic+0x114>)
 800054c:	fb83 1302 	smull	r1, r3, r3, r2
 8000550:	1099      	asrs	r1, r3, #2
 8000552:	17d3      	asrs	r3, r2, #31
 8000554:	1ac9      	subs	r1, r1, r3
 8000556:	460b      	mov	r3, r1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	1ad1      	subs	r1, r2, r3
 8000560:	4608      	mov	r0, r1
 8000562:	f7ff fef1 	bl	8000348 <display7SEG2>
		if(timer3_flag == 1)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <display_7SEG_automatic+0x118>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d111      	bne.n	8000592 <display_7SEG_automatic+0x102>
			timer3_flag = 0;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <display_7SEG_automatic+0x118>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
			set_timer3(500);
 8000574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000578:	f000 fd1a 	bl	8000fb0 <set_timer3>
			enabled_7SEG = EN0;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <display_7SEG_automatic+0x108>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
			countdown1--;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <display_7SEG_automatic+0x11c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <display_7SEG_automatic+0x11c>)
 800058a:	6013      	str	r3, [r2, #0]
		break;
 800058c:	e001      	b.n	8000592 <display_7SEG_automatic+0x102>
		break;
 800058e:	bf00      	nop
 8000590:	e000      	b.n	8000594 <display_7SEG_automatic+0x104>
		break;
 8000592:	bf00      	nop
	}
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000060 	.word	0x20000060
 800059c:	40010800 	.word	0x40010800
 80005a0:	20000064 	.word	0x20000064
 80005a4:	66666667 	.word	0x66666667
 80005a8:	20000084 	.word	0x20000084
 80005ac:	20000068 	.word	0x20000068

080005b0 <display_7SEG_modify>:

void display_7SEG_modify()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	switch(enabled_7SEG)
 80005b4:	4b32      	ldr	r3, [pc, #200]	; (8000680 <display_7SEG_modify+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <display_7SEG_modify+0x12>
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d023      	beq.n	8000608 <display_7SEG_modify+0x58>
			enabled_7SEG = EN0;
		}
		break;

	}
}
 80005c0:	e05b      	b.n	800067a <display_7SEG_modify+0xca>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	482e      	ldr	r0, [pc, #184]	; (8000684 <display_7SEG_modify+0xd4>)
 80005ca:	f001 f910 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	482b      	ldr	r0, [pc, #172]	; (8000684 <display_7SEG_modify+0xd4>)
 80005d6:	f001 f90a 	bl	80017ee <HAL_GPIO_WritePin>
		display7SEG1(0);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff fe1c 	bl	8000218 <display7SEG1>
		display7SEG2(mode);
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <display_7SEG_modify+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff feaf 	bl	8000348 <display7SEG2>
		if(timer3_flag == 1)
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <display_7SEG_modify+0xdc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d140      	bne.n	8000674 <display_7SEG_modify+0xc4>
			timer3_flag = 0;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <display_7SEG_modify+0xdc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
			set_timer3(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fc:	f000 fcd8 	bl	8000fb0 <set_timer3>
			enabled_7SEG = EN1;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <display_7SEG_modify+0xd0>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
		break;
 8000606:	e035      	b.n	8000674 <display_7SEG_modify+0xc4>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <display_7SEG_modify+0xd4>)
 8000610:	f001 f8ed 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	481a      	ldr	r0, [pc, #104]	; (8000684 <display_7SEG_modify+0xd4>)
 800061c:	f001 f8e7 	bl	80017ee <HAL_GPIO_WritePin>
		display7SEG1(count / 10);
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <display_7SEG_modify+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <display_7SEG_modify+0xe4>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1092      	asrs	r2, r2, #2
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdf1 	bl	8000218 <display7SEG1>
		display7SEG2(count % 10);
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <display_7SEG_modify+0xe0>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <display_7SEG_modify+0xe4>)
 800063c:	fb83 1302 	smull	r1, r3, r3, r2
 8000640:	1099      	asrs	r1, r3, #2
 8000642:	17d3      	asrs	r3, r2, #31
 8000644:	1ac9      	subs	r1, r1, r3
 8000646:	460b      	mov	r3, r1
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	1ad1      	subs	r1, r2, r3
 8000650:	4608      	mov	r0, r1
 8000652:	f7ff fe79 	bl	8000348 <display7SEG2>
		if(timer3_flag == 1)
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <display_7SEG_modify+0xdc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10c      	bne.n	8000678 <display_7SEG_modify+0xc8>
			timer3_flag = 0;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <display_7SEG_modify+0xdc>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
			set_timer3(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000668:	f000 fca2 	bl	8000fb0 <set_timer3>
			enabled_7SEG = EN0;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <display_7SEG_modify+0xd0>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		break;
 8000672:	e001      	b.n	8000678 <display_7SEG_modify+0xc8>
		break;
 8000674:	bf00      	nop
 8000676:	e000      	b.n	800067a <display_7SEG_modify+0xca>
		break;
 8000678:	bf00      	nop
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000060 	.word	0x20000060
 8000684:	40010800 	.word	0x40010800
 8000688:	20000014 	.word	0x20000014
 800068c:	20000084 	.word	0x20000084
 8000690:	20000018 	.word	0x20000018
 8000694:	66666667 	.word	0x66666667

08000698 <fsm_automatic_run>:
int timer_red = 7;
int timer_yellow = 2;
int timer_green = 3;

void fsm_automatic_run()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// traffic light 1
	switch(status1)
 800069c:	4baa      	ldr	r3, [pc, #680]	; (8000948 <fsm_automatic_run+0x2b0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	f200 809b 	bhi.w	80007de <fsm_automatic_run+0x146>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <fsm_automatic_run+0x18>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	08000707 	.word	0x08000707
 80006b8:	0800074f 	.word	0x0800074f
 80006bc:	08000797 	.word	0x08000797
	{
	case INIT:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c6:	48a1      	ldr	r0, [pc, #644]	; (800094c <fsm_automatic_run+0x2b4>)
 80006c8:	f001 f891 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d2:	489e      	ldr	r0, [pc, #632]	; (800094c <fsm_automatic_run+0x2b4>)
 80006d4:	f001 f88b 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	489b      	ldr	r0, [pc, #620]	; (800094c <fsm_automatic_run+0x2b4>)
 80006e0:	f001 f885 	bl	80017ee <HAL_GPIO_WritePin>
		set_timer1(timer_red * 1000);
 80006e4:	4b9a      	ldr	r3, [pc, #616]	; (8000950 <fsm_automatic_run+0x2b8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc25 	bl	8000f40 <set_timer1>
		status1 = AUTO_RED;
 80006f6:	4b94      	ldr	r3, [pc, #592]	; (8000948 <fsm_automatic_run+0x2b0>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
		countdown0 = timer_red;
 80006fc:	4b94      	ldr	r3, [pc, #592]	; (8000950 <fsm_automatic_run+0x2b8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a94      	ldr	r2, [pc, #592]	; (8000954 <fsm_automatic_run+0x2bc>)
 8000702:	6013      	str	r3, [r2, #0]
		break;
 8000704:	e074      	b.n	80007f0 <fsm_automatic_run+0x158>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	488f      	ldr	r0, [pc, #572]	; (800094c <fsm_automatic_run+0x2b4>)
 800070e:	f001 f86e 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000718:	488c      	ldr	r0, [pc, #560]	; (800094c <fsm_automatic_run+0x2b4>)
 800071a:	f001 f868 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 800071e:	4b8e      	ldr	r3, [pc, #568]	; (8000958 <fsm_automatic_run+0x2c0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d15f      	bne.n	80007e6 <fsm_automatic_run+0x14e>
		{
			timer1_flag = 0;
 8000726:	4b8c      	ldr	r3, [pc, #560]	; (8000958 <fsm_automatic_run+0x2c0>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
			set_timer1(timer_green * 1000);
 800072c:	4b8b      	ldr	r3, [pc, #556]	; (800095c <fsm_automatic_run+0x2c4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fc01 	bl	8000f40 <set_timer1>
			status1 = AUTO_GREEN;
 800073e:	4b82      	ldr	r3, [pc, #520]	; (8000948 <fsm_automatic_run+0x2b0>)
 8000740:	2204      	movs	r2, #4
 8000742:	601a      	str	r2, [r3, #0]
			countdown0 = timer_green;
 8000744:	4b85      	ldr	r3, [pc, #532]	; (800095c <fsm_automatic_run+0x2c4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a82      	ldr	r2, [pc, #520]	; (8000954 <fsm_automatic_run+0x2bc>)
 800074a:	6013      	str	r3, [r2, #0]
		}
		break;
 800074c:	e04b      	b.n	80007e6 <fsm_automatic_run+0x14e>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	487d      	ldr	r0, [pc, #500]	; (800094c <fsm_automatic_run+0x2b4>)
 8000756:	f001 f84a 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	487a      	ldr	r0, [pc, #488]	; (800094c <fsm_automatic_run+0x2b4>)
 8000762:	f001 f844 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 8000766:	4b7c      	ldr	r3, [pc, #496]	; (8000958 <fsm_automatic_run+0x2c0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d13d      	bne.n	80007ea <fsm_automatic_run+0x152>
		{
			timer1_flag = 0;
 800076e:	4b7a      	ldr	r3, [pc, #488]	; (8000958 <fsm_automatic_run+0x2c0>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
			set_timer1(timer_red * 1000);
 8000774:	4b76      	ldr	r3, [pc, #472]	; (8000950 <fsm_automatic_run+0x2b8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbdd 	bl	8000f40 <set_timer1>
			status1 = AUTO_RED;
 8000786:	4b70      	ldr	r3, [pc, #448]	; (8000948 <fsm_automatic_run+0x2b0>)
 8000788:	2202      	movs	r2, #2
 800078a:	601a      	str	r2, [r3, #0]
			countdown0 = timer_red;
 800078c:	4b70      	ldr	r3, [pc, #448]	; (8000950 <fsm_automatic_run+0x2b8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a70      	ldr	r2, [pc, #448]	; (8000954 <fsm_automatic_run+0x2bc>)
 8000792:	6013      	str	r3, [r2, #0]
		}
		break;
 8000794:	e029      	b.n	80007ea <fsm_automatic_run+0x152>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079c:	486b      	ldr	r0, [pc, #428]	; (800094c <fsm_automatic_run+0x2b4>)
 800079e:	f001 f826 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	4868      	ldr	r0, [pc, #416]	; (800094c <fsm_automatic_run+0x2b4>)
 80007aa:	f001 f820 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 80007ae:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <fsm_automatic_run+0x2c0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d11b      	bne.n	80007ee <fsm_automatic_run+0x156>
		{
			timer1_flag = 0;
 80007b6:	4b68      	ldr	r3, [pc, #416]	; (8000958 <fsm_automatic_run+0x2c0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
			set_timer1(timer_yellow * 1000);
 80007bc:	4b68      	ldr	r3, [pc, #416]	; (8000960 <fsm_automatic_run+0x2c8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fbb9 	bl	8000f40 <set_timer1>
			status1 = AUTO_YELLOW;
 80007ce:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <fsm_automatic_run+0x2b0>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	601a      	str	r2, [r3, #0]
			countdown0 = timer_yellow;
 80007d4:	4b62      	ldr	r3, [pc, #392]	; (8000960 <fsm_automatic_run+0x2c8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a5e      	ldr	r2, [pc, #376]	; (8000954 <fsm_automatic_run+0x2bc>)
 80007da:	6013      	str	r3, [r2, #0]
		}
		break;
 80007dc:	e007      	b.n	80007ee <fsm_automatic_run+0x156>
	default:
		status1 = INIT;
 80007de:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <fsm_automatic_run+0x2b0>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
		break;
 80007e4:	e004      	b.n	80007f0 <fsm_automatic_run+0x158>
		break;
 80007e6:	bf00      	nop
 80007e8:	e002      	b.n	80007f0 <fsm_automatic_run+0x158>
		break;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <fsm_automatic_run+0x158>
		break;
 80007ee:	bf00      	nop
	}
	// traffic light 2
	switch(status2)
 80007f0:	4b5c      	ldr	r3, [pc, #368]	; (8000964 <fsm_automatic_run+0x2cc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	f200 809b 	bhi.w	8000932 <fsm_automatic_run+0x29a>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <fsm_automatic_run+0x16c>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	08000815 	.word	0x08000815
 8000808:	0800085b 	.word	0x0800085b
 800080c:	080008a3 	.word	0x080008a3
 8000810:	080008eb 	.word	0x080008eb
	{
	case INIT:
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <fsm_automatic_run+0x2b4>)
 800081c:	f000 ffe7 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000826:	4849      	ldr	r0, [pc, #292]	; (800094c <fsm_automatic_run+0x2b4>)
 8000828:	f000 ffe1 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4846      	ldr	r0, [pc, #280]	; (800094c <fsm_automatic_run+0x2b4>)
 8000834:	f000 ffdb 	bl	80017ee <HAL_GPIO_WritePin>
		set_timer2(timer_green * 1000);
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <fsm_automatic_run+0x2c4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fb97 	bl	8000f78 <set_timer2>
		status2 = AUTO_GREEN;
 800084a:	4b46      	ldr	r3, [pc, #280]	; (8000964 <fsm_automatic_run+0x2cc>)
 800084c:	2204      	movs	r2, #4
 800084e:	601a      	str	r2, [r3, #0]
		countdown1 = timer_green;
 8000850:	4b42      	ldr	r3, [pc, #264]	; (800095c <fsm_automatic_run+0x2c4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a44      	ldr	r2, [pc, #272]	; (8000968 <fsm_automatic_run+0x2d0>)
 8000856:	6013      	str	r3, [r2, #0]
		break;
 8000858:	e074      	b.n	8000944 <fsm_automatic_run+0x2ac>
	case AUTO_RED:
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	483a      	ldr	r0, [pc, #232]	; (800094c <fsm_automatic_run+0x2b4>)
 8000862:	f000 ffc4 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086c:	4837      	ldr	r0, [pc, #220]	; (800094c <fsm_automatic_run+0x2b4>)
 800086e:	f000 ffbe 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer2_flag == 1)
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <fsm_automatic_run+0x2d4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d15f      	bne.n	800093a <fsm_automatic_run+0x2a2>
		{
			timer2_flag = 0;
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <fsm_automatic_run+0x2d4>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
			set_timer2(timer_green * 1000);
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <fsm_automatic_run+0x2c4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fb73 	bl	8000f78 <set_timer2>
			status2 = AUTO_GREEN;
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <fsm_automatic_run+0x2cc>)
 8000894:	2204      	movs	r2, #4
 8000896:	601a      	str	r2, [r3, #0]
			countdown1 = timer_green;
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <fsm_automatic_run+0x2c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a32      	ldr	r2, [pc, #200]	; (8000968 <fsm_automatic_run+0x2d0>)
 800089e:	6013      	str	r3, [r2, #0]
		}
		break;
 80008a0:	e04b      	b.n	800093a <fsm_automatic_run+0x2a2>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a8:	4828      	ldr	r0, [pc, #160]	; (800094c <fsm_automatic_run+0x2b4>)
 80008aa:	f000 ffa0 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b4:	4825      	ldr	r0, [pc, #148]	; (800094c <fsm_automatic_run+0x2b4>)
 80008b6:	f000 ff9a 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer2_flag == 1)
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <fsm_automatic_run+0x2d4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d13d      	bne.n	800093e <fsm_automatic_run+0x2a6>
		{
			timer2_flag = 0;
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <fsm_automatic_run+0x2d4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
			set_timer2(timer_red * 1000);
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <fsm_automatic_run+0x2b8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d0:	fb02 f303 	mul.w	r3, r2, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fb4f 	bl	8000f78 <set_timer2>
			status2 = AUTO_RED;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <fsm_automatic_run+0x2cc>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
			countdown1 = timer_red;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <fsm_automatic_run+0x2b8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <fsm_automatic_run+0x2d0>)
 80008e6:	6013      	str	r3, [r2, #0]
		}
		break;
 80008e8:	e029      	b.n	800093e <fsm_automatic_run+0x2a6>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <fsm_automatic_run+0x2b4>)
 80008f2:	f000 ff7c 	bl	80017ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <fsm_automatic_run+0x2b4>)
 80008fe:	f000 ff76 	bl	80017ee <HAL_GPIO_WritePin>
		if(timer2_flag == 1)
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <fsm_automatic_run+0x2d4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d11b      	bne.n	8000942 <fsm_automatic_run+0x2aa>
		{
			timer2_flag = 0;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <fsm_automatic_run+0x2d4>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
			set_timer2(timer_yellow * 1000);
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <fsm_automatic_run+0x2c8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fb2b 	bl	8000f78 <set_timer2>
			status2 = AUTO_YELLOW;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <fsm_automatic_run+0x2cc>)
 8000924:	2203      	movs	r2, #3
 8000926:	601a      	str	r2, [r3, #0]
			countdown1 = timer_yellow;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <fsm_automatic_run+0x2c8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <fsm_automatic_run+0x2d0>)
 800092e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000930:	e007      	b.n	8000942 <fsm_automatic_run+0x2aa>
	default:
		status2 = INIT;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <fsm_automatic_run+0x2cc>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
		break;
 8000938:	e004      	b.n	8000944 <fsm_automatic_run+0x2ac>
		break;
 800093a:	bf00      	nop
 800093c:	e002      	b.n	8000944 <fsm_automatic_run+0x2ac>
		break;
 800093e:	bf00      	nop
 8000940:	e000      	b.n	8000944 <fsm_automatic_run+0x2ac>
		break;
 8000942:	bf00      	nop
	}
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	40010800 	.word	0x40010800
 8000950:	20000008 	.word	0x20000008
 8000954:	20000064 	.word	0x20000064
 8000958:	2000007c 	.word	0x2000007c
 800095c:	20000010 	.word	0x20000010
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000004 	.word	0x20000004
 8000968:	20000068 	.word	0x20000068
 800096c:	20000080 	.word	0x20000080

08000970 <fsm_modify_run>:
 */

#include "fsm_modify.h"

void fsm_modify_run()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	switch(mode)
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <fsm_modify_run+0x178>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b04      	cmp	r3, #4
 800097a:	d075      	beq.n	8000a68 <fsm_modify_run+0xf8>
 800097c:	2b04      	cmp	r3, #4
 800097e:	f300 80aa 	bgt.w	8000ad6 <fsm_modify_run+0x166>
 8000982:	2b02      	cmp	r3, #2
 8000984:	d002      	beq.n	800098c <fsm_modify_run+0x1c>
 8000986:	2b03      	cmp	r3, #3
 8000988:	d037      	beq.n	80009fa <fsm_modify_run+0x8a>
			timer_green = count;
			count = 1;
		}
		break;
	default:
		break;
 800098a:	e0a4      	b.n	8000ad6 <fsm_modify_run+0x166>
		if(timer1_flag == 1)
 800098c:	4b57      	ldr	r3, [pc, #348]	; (8000aec <fsm_modify_run+0x17c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d110      	bne.n	80009b6 <fsm_modify_run+0x46>
			timer1_flag = 0;
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <fsm_modify_run+0x17c>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
			set_timer1(500);
 800099a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099e:	f000 facf 	bl	8000f40 <set_timer1>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	4852      	ldr	r0, [pc, #328]	; (8000af0 <fsm_modify_run+0x180>)
 80009a8:	f000 ff39 	bl	800181e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	484f      	ldr	r0, [pc, #316]	; (8000af0 <fsm_modify_run+0x180>)
 80009b2:	f000 ff34 	bl	800181e <HAL_GPIO_TogglePin>
		if(button2_flag == 1)
 80009b6:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <fsm_modify_run+0x184>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d107      	bne.n	80009ce <fsm_modify_run+0x5e>
			button2_flag = 0;
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <fsm_modify_run+0x184>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
			count++;
 80009c4:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <fsm_modify_run+0x188>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a4b      	ldr	r2, [pc, #300]	; (8000af8 <fsm_modify_run+0x188>)
 80009cc:	6013      	str	r3, [r2, #0]
		if(count > 99) count = 1;
 80009ce:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <fsm_modify_run+0x188>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b63      	cmp	r3, #99	; 0x63
 80009d4:	dd02      	ble.n	80009dc <fsm_modify_run+0x6c>
 80009d6:	4b48      	ldr	r3, [pc, #288]	; (8000af8 <fsm_modify_run+0x188>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
		if(button3_flag == 1)
 80009dc:	4b47      	ldr	r3, [pc, #284]	; (8000afc <fsm_modify_run+0x18c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d17a      	bne.n	8000ada <fsm_modify_run+0x16a>
			button3_flag = 0;
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <fsm_modify_run+0x18c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
			timer_red = count;
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <fsm_modify_run+0x188>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <fsm_modify_run+0x190>)
 80009f0:	6013      	str	r3, [r2, #0]
			count = 1;
 80009f2:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <fsm_modify_run+0x188>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
		break;
 80009f8:	e06f      	b.n	8000ada <fsm_modify_run+0x16a>
		if(timer1_flag == 1)
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <fsm_modify_run+0x17c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d110      	bne.n	8000a24 <fsm_modify_run+0xb4>
			timer1_flag = 0;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <fsm_modify_run+0x17c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
			set_timer1(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0c:	f000 fa98 	bl	8000f40 <set_timer1>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a14:	4836      	ldr	r0, [pc, #216]	; (8000af0 <fsm_modify_run+0x180>)
 8000a16:	f000 ff02 	bl	800181e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4834      	ldr	r0, [pc, #208]	; (8000af0 <fsm_modify_run+0x180>)
 8000a20:	f000 fefd 	bl	800181e <HAL_GPIO_TogglePin>
		if(button2_flag == 1)
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <fsm_modify_run+0x184>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <fsm_modify_run+0xcc>
			button2_flag = 0;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <fsm_modify_run+0x184>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
			count++;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <fsm_modify_run+0x188>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <fsm_modify_run+0x188>)
 8000a3a:	6013      	str	r3, [r2, #0]
		if(count > 99) count = 1;
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <fsm_modify_run+0x188>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b63      	cmp	r3, #99	; 0x63
 8000a42:	dd02      	ble.n	8000a4a <fsm_modify_run+0xda>
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <fsm_modify_run+0x188>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
		if(button3_flag == 1)
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <fsm_modify_run+0x18c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d145      	bne.n	8000ade <fsm_modify_run+0x16e>
			button3_flag = 0;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <fsm_modify_run+0x18c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
			timer_yellow = count;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <fsm_modify_run+0x188>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <fsm_modify_run+0x194>)
 8000a5e:	6013      	str	r3, [r2, #0]
			count = 1;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <fsm_modify_run+0x188>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
		break;
 8000a66:	e03a      	b.n	8000ade <fsm_modify_run+0x16e>
		if(timer1_flag == 1)
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <fsm_modify_run+0x17c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d110      	bne.n	8000a92 <fsm_modify_run+0x122>
			timer1_flag = 0;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <fsm_modify_run+0x17c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
			set_timer1(500);
 8000a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7a:	f000 fa61 	bl	8000f40 <set_timer1>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	481b      	ldr	r0, [pc, #108]	; (8000af0 <fsm_modify_run+0x180>)
 8000a84:	f000 fecb 	bl	800181e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8c:	4818      	ldr	r0, [pc, #96]	; (8000af0 <fsm_modify_run+0x180>)
 8000a8e:	f000 fec6 	bl	800181e <HAL_GPIO_TogglePin>
		if(button2_flag == 1)
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <fsm_modify_run+0x184>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d107      	bne.n	8000aaa <fsm_modify_run+0x13a>
			button2_flag = 0;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <fsm_modify_run+0x184>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
			count++;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <fsm_modify_run+0x188>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <fsm_modify_run+0x188>)
 8000aa8:	6013      	str	r3, [r2, #0]
		if(count > 99) count = 1;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <fsm_modify_run+0x188>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b63      	cmp	r3, #99	; 0x63
 8000ab0:	dd02      	ble.n	8000ab8 <fsm_modify_run+0x148>
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <fsm_modify_run+0x188>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
		if(button3_flag == 1)
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <fsm_modify_run+0x18c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d110      	bne.n	8000ae2 <fsm_modify_run+0x172>
			button3_flag = 0;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <fsm_modify_run+0x18c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
			timer_green = count;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <fsm_modify_run+0x188>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <fsm_modify_run+0x198>)
 8000acc:	6013      	str	r3, [r2, #0]
			count = 1;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <fsm_modify_run+0x188>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
		break;
 8000ad4:	e005      	b.n	8000ae2 <fsm_modify_run+0x172>
		break;
 8000ad6:	bf00      	nop
 8000ad8:	e004      	b.n	8000ae4 <fsm_modify_run+0x174>
		break;
 8000ada:	bf00      	nop
 8000adc:	e002      	b.n	8000ae4 <fsm_modify_run+0x174>
		break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <fsm_modify_run+0x174>
		break;
 8000ae2:	bf00      	nop
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000014 	.word	0x20000014
 8000aec:	2000007c 	.word	0x2000007c
 8000af0:	40010800 	.word	0x40010800
 8000af4:	2000004c 	.word	0x2000004c
 8000af8:	20000018 	.word	0x20000018
 8000afc:	20000050 	.word	0x20000050
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000000c 	.word	0x2000000c
 8000b08:	20000010 	.word	0x20000010

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb6c 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f914 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f99a 	bl	8000e50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b1c:	f000 f94c 	bl	8000db8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b20:	487f      	ldr	r0, [pc, #508]	; (8000d20 <main+0x214>)
 8000b22:	f001 facd 	bl	80020c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // set initial state for traffic light
  HAL_GPIO_WritePin(CLOCK_CHECK_GPIO_Port, CLOCK_CHECK_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	487e      	ldr	r0, [pc, #504]	; (8000d24 <main+0x218>)
 8000b2c:	f000 fe5f 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b36:	487b      	ldr	r0, [pc, #492]	; (8000d24 <main+0x218>)
 8000b38:	f000 fe59 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b42:	4878      	ldr	r0, [pc, #480]	; (8000d24 <main+0x218>)
 8000b44:	f000 fe53 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	4875      	ldr	r0, [pc, #468]	; (8000d24 <main+0x218>)
 8000b50:	f000 fe4d 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4872      	ldr	r0, [pc, #456]	; (8000d24 <main+0x218>)
 8000b5c:	f000 fe47 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	486f      	ldr	r0, [pc, #444]	; (8000d24 <main+0x218>)
 8000b68:	f000 fe41 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b72:	486c      	ldr	r0, [pc, #432]	; (8000d24 <main+0x218>)
 8000b74:	f000 fe3b 	bl	80017ee <HAL_GPIO_WritePin>
  // set initial state for enable pin
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	4869      	ldr	r0, [pc, #420]	; (8000d24 <main+0x218>)
 8000b80:	f000 fe35 	bl	80017ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8a:	4866      	ldr	r0, [pc, #408]	; (8000d24 <main+0x218>)
 8000b8c:	f000 fe2f 	bl	80017ee <HAL_GPIO_WritePin>
  set_timer3(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f000 fa0c 	bl	8000fb0 <set_timer3>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // timer flag 0 has time cycle of 1 second
	  // controls the red blinking led, separate from the rest
	  if(timer0_flag == 1)
 8000b98:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <main+0x21c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <main+0xa2>
	  {
		  timer0_flag = 0;
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <main+0x21c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(CLOCK_CHECK_GPIO_Port, CLOCK_CHECK_Pin);
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	485e      	ldr	r0, [pc, #376]	; (8000d24 <main+0x218>)
 8000baa:	f000 fe38 	bl	800181e <HAL_GPIO_TogglePin>
	  }
	  // execute the mode
	  switch(mode)
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <main+0x220>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	f200 80a6 	bhi.w	8000d06 <main+0x1fa>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <main+0xb4>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000c47 	.word	0x08000c47
 8000bc8:	08000c83 	.word	0x08000c83
 8000bcc:	08000cbf 	.word	0x08000cbf
	  {
	  case 1:
		  fsm_automatic_run();
 8000bd0:	f7ff fd62 	bl	8000698 <fsm_automatic_run>
		  display_7SEG_automatic();
 8000bd4:	f7ff fc5c 	bl	8000490 <display_7SEG_automatic>
		  if(button1_flag == 1)
 8000bd8:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <main+0x224>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	f040 8096 	bne.w	8000d0e <main+0x202>
		  {
			  button1_flag = 0;
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <main+0x224>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
			  mode = 2;
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <main+0x220>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	601a      	str	r2, [r3, #0]
			  count = 1;
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <main+0x228>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <main+0x218>)
 8000bfc:	f000 fdf7 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c06:	4847      	ldr	r0, [pc, #284]	; (8000d24 <main+0x218>)
 8000c08:	f000 fdf1 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4844      	ldr	r0, [pc, #272]	; (8000d24 <main+0x218>)
 8000c14:	f000 fdeb 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	4841      	ldr	r0, [pc, #260]	; (8000d24 <main+0x218>)
 8000c20:	f000 fde5 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	483e      	ldr	r0, [pc, #248]	; (8000d24 <main+0x218>)
 8000c2c:	f000 fddf 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	483b      	ldr	r0, [pc, #236]	; (8000d24 <main+0x218>)
 8000c38:	f000 fdd9 	bl	80017ee <HAL_GPIO_WritePin>
			  set_timer1(500);
 8000c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c40:	f000 f97e 	bl	8000f40 <set_timer1>
		  }
		  break;
 8000c44:	e063      	b.n	8000d0e <main+0x202>
	  case 2:
		  fsm_modify_run();
 8000c46:	f7ff fe93 	bl	8000970 <fsm_modify_run>
		  display_7SEG_modify();
 8000c4a:	f7ff fcb1 	bl	80005b0 <display_7SEG_modify>
		  if(button1_flag == 1)
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <main+0x224>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d15d      	bne.n	8000d12 <main+0x206>
		  {
			  button1_flag = 0;
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <main+0x224>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
			  mode = 3;
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <main+0x220>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	601a      	str	r2, [r3, #0]
			  count = 1;
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <main+0x228>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	482d      	ldr	r0, [pc, #180]	; (8000d24 <main+0x218>)
 8000c70:	f000 fdbd 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <main+0x218>)
 8000c7c:	f000 fdb7 	bl	80017ee <HAL_GPIO_WritePin>
		  }
		  break;
 8000c80:	e047      	b.n	8000d12 <main+0x206>
	  case 3:
		  fsm_modify_run();
 8000c82:	f7ff fe75 	bl	8000970 <fsm_modify_run>
		  display_7SEG_modify();
 8000c86:	f7ff fc93 	bl	80005b0 <display_7SEG_modify>
		  if(button1_flag == 1)
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <main+0x224>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d141      	bne.n	8000d16 <main+0x20a>
		  {
			  button1_flag = 0;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <main+0x224>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
			  mode = 4;
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <main+0x220>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	601a      	str	r2, [r3, #0]
			  count = 1;
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <main+0x228>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <main+0x218>)
 8000cac:	f000 fd9f 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <main+0x218>)
 8000cb8:	f000 fd99 	bl	80017ee <HAL_GPIO_WritePin>
		  }
		  break;
 8000cbc:	e02b      	b.n	8000d16 <main+0x20a>
	  case 4:
		  fsm_modify_run();
 8000cbe:	f7ff fe57 	bl	8000970 <fsm_modify_run>
		  display_7SEG_modify();
 8000cc2:	f7ff fc75 	bl	80005b0 <display_7SEG_modify>
		  if(button1_flag == 1)
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <main+0x224>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d125      	bne.n	8000d1a <main+0x20e>
		  {
			  button1_flag = 0;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <main+0x224>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
			  mode = 1;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <main+0x220>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
			  count = 1;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <main+0x228>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
			  status1 = INIT;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <main+0x22c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
			  status2 = INIT;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <main+0x230>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <main+0x218>)
 8000cf4:	f000 fd7b 	bl	80017ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <main+0x218>)
 8000d00:	f000 fd75 	bl	80017ee <HAL_GPIO_WritePin>
		  }
		  break;
 8000d04:	e009      	b.n	8000d1a <main+0x20e>
	  default:
		  mode = 1;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <main+0x220>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
		  break;
 8000d0c:	e006      	b.n	8000d1c <main+0x210>
		  break;
 8000d0e:	bf00      	nop
 8000d10:	e742      	b.n	8000b98 <main+0x8c>
		  break;
 8000d12:	bf00      	nop
 8000d14:	e740      	b.n	8000b98 <main+0x8c>
		  break;
 8000d16:	bf00      	nop
 8000d18:	e73e      	b.n	8000b98 <main+0x8c>
		  break;
 8000d1a:	bf00      	nop
	  if(timer0_flag == 1)
 8000d1c:	e73c      	b.n	8000b98 <main+0x8c>
 8000d1e:	bf00      	nop
 8000d20:	20000088 	.word	0x20000088
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000078 	.word	0x20000078
 8000d2c:	20000014 	.word	0x20000014
 8000d30:	20000048 	.word	0x20000048
 8000d34:	20000018 	.word	0x20000018
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b090      	sub	sp, #64	; 0x40
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fd6e 	bl	8002830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd6a 	bl	8001850 <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d82:	f000 f8d7 	bl	8000f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ffd6 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000daa:	f000 f8c3 	bl	8000f34 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dde:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dec:	220a      	movs	r2, #10
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dfe:	f001 f90f 	bl	8002020 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 f894 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000e1a:	f001 faa5 	bl	8002368 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 f886 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000e36:	f001 fc6d 	bl	8002714 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f878 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000088 	.word	0x20000088

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_GPIO_Init+0xb8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLOCK_CHECK_Pin|EN0_Pin|EN1_Pin|RED1_Pin
 8000e94:	2200      	movs	r2, #0
 8000e96:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e9c:	f000 fca7 	bl	80017ee <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_GPIO_Init+0xc0>)
 8000ea8:	f000 fca1 	bl	80017ee <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CLOCK_CHECK_Pin EN0_Pin EN1_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin */
  GPIO_InitStruct.Pin = CLOCK_CHECK_Pin|EN0_Pin|EN1_Pin|RED1_Pin
 8000eac:	f64f 7310 	movw	r3, #65296	; 0xff10
 8000eb0:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000ec6:	f000 fb01 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000eca:	23e0      	movs	r3, #224	; 0xe0
 8000ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000ede:	f000 faf5 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000ee2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ee6:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_GPIO_Init+0xc0>)
 8000efc:	f000 fae6 	bl	80014cc <HAL_GPIO_Init>

}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40010c00 	.word	0x40010c00

08000f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000f1c:	f000 f864 	bl	8000fe8 <timer_run>
	getKeyInput1();
 8000f20:	f7ff f914 	bl	800014c <getKeyInput1>
	getKeyInput2();
 8000f24:	f7ff f934 	bl	8000190 <getKeyInput2>
	getKeyInput3();
 8000f28:	f7ff f954 	bl	80001d4 <getKeyInput3>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <set_timer1>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;

void set_timer1(int duration)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <set_timer1+0x2c>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1092      	asrs	r2, r2, #2
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <set_timer1+0x30>)
 8000f58:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <set_timer1+0x34>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	66666667 	.word	0x66666667
 8000f70:	2000006c 	.word	0x2000006c
 8000f74:	2000007c 	.word	0x2000007c

08000f78 <set_timer2>:

void set_timer2(int duration)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <set_timer2+0x2c>)
 8000f84:	fb82 1203 	smull	r1, r2, r2, r3
 8000f88:	1092      	asrs	r2, r2, #2
 8000f8a:	17db      	asrs	r3, r3, #31
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <set_timer2+0x30>)
 8000f90:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <set_timer2+0x34>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	66666667 	.word	0x66666667
 8000fa8:	20000070 	.word	0x20000070
 8000fac:	20000080 	.word	0x20000080

08000fb0 <set_timer3>:

void set_timer3(int duration)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TICK;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <set_timer3+0x2c>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1092      	asrs	r2, r2, #2
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <set_timer3+0x30>)
 8000fc8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <set_timer3+0x34>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	66666667 	.word	0x66666667
 8000fe0:	20000074 	.word	0x20000074
 8000fe4:	20000084 	.word	0x20000084

08000fe8 <timer_run>:

void timer_run()
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	// red led exclusive
	if(timer0_counter <= 0)
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <timer_run+0x7c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dc06      	bgt.n	8001002 <timer_run+0x1a>
	{
		timer0_flag = 1;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <timer_run+0x80>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
		timer0_counter = 100;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <timer_run+0x7c>)
 8000ffc:	2264      	movs	r2, #100	; 0x64
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e004      	b.n	800100c <timer_run+0x24>
	}
	else timer0_counter--;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <timer_run+0x7c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <timer_run+0x7c>)
 800100a:	6013      	str	r3, [r2, #0]
	// controls first traffic light
	if(timer1_counter <= 0) timer1_flag = 1;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <timer_run+0x84>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dc03      	bgt.n	800101c <timer_run+0x34>
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <timer_run+0x88>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e004      	b.n	8001026 <timer_run+0x3e>
	else timer1_counter--;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <timer_run+0x84>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <timer_run+0x84>)
 8001024:	6013      	str	r3, [r2, #0]
	// controls second traffic light
	if(timer2_counter <= 0) timer2_flag = 1;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <timer_run+0x8c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dc03      	bgt.n	8001036 <timer_run+0x4e>
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <timer_run+0x90>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e004      	b.n	8001040 <timer_run+0x58>
	else timer2_counter--;
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <timer_run+0x8c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3b01      	subs	r3, #1
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <timer_run+0x8c>)
 800103e:	6013      	str	r3, [r2, #0]
	// controls 7 segment leds
	if(timer3_counter <= 0) timer3_flag = 1;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <timer_run+0x94>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dc03      	bgt.n	8001050 <timer_run+0x68>
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <timer_run+0x98>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
	else timer3_counter--;
}
 800104e:	e004      	b.n	800105a <timer_run+0x72>
	else timer3_counter--;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <timer_run+0x94>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <timer_run+0x94>)
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000001c 	.word	0x2000001c
 8001068:	20000078 	.word	0x20000078
 800106c:	2000006c 	.word	0x2000006c
 8001070:	2000007c 	.word	0x2000007c
 8001074:	20000070 	.word	0x20000070
 8001078:	20000080 	.word	0x20000080
 800107c:	20000074 	.word	0x20000074
 8001080:	20000084 	.word	0x20000084

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_MspInit+0x5c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_MspInit+0x60>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_MspInit+0x60>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d113      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201c      	movs	r0, #28
 8001118:	f000 f9a1 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111c:	201c      	movs	r0, #28
 800111e:	f000 f9ba 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f87f 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f000 ffe7 	bl	8002158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000088 	.word	0x20000088

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c6:	f7ff ffe5 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f001 fb0d 	bl	80027e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fc9d 	bl	8000b0c <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80011dc:	08002880 	.word	0x08002880
  ldr r2, =_sbss
 80011e0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80011e4:	200000d4 	.word	0x200000d4

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f923 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff ff3c 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f93b 	bl	80014b2 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f903 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000020 	.word	0x20000020
 8001270:	20000028 	.word	0x20000028
 8001274:	20000024 	.word	0x20000024

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_IncTick+0x20>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000028 	.word	0x20000028
 8001298:	200000d0 	.word	0x200000d0

0800129c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	200000d0 	.word	0x200000d0

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <__NVIC_EnableIRQ+0x34>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff90 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff2d 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff42 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff90 	bl	80013a0 <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5f 	bl	800134c <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff35 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e148      	b.n	8001772 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e0:	2201      	movs	r2, #1
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8137 	bne.w	800176c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4aa3      	ldr	r2, [pc, #652]	; (8001790 <HAL_GPIO_Init+0x2c4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001508:	4aa1      	ldr	r2, [pc, #644]	; (8001790 <HAL_GPIO_Init+0x2c4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d875      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800150e:	4aa1      	ldr	r2, [pc, #644]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d058      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001514:	4a9f      	ldr	r2, [pc, #636]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d86f      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800151a:	4a9f      	ldr	r2, [pc, #636]	; (8001798 <HAL_GPIO_Init+0x2cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d052      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001520:	4a9d      	ldr	r2, [pc, #628]	; (8001798 <HAL_GPIO_Init+0x2cc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d869      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001526:	4a9d      	ldr	r2, [pc, #628]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04c      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 800152c:	4a9b      	ldr	r2, [pc, #620]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d863      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001532:	4a9b      	ldr	r2, [pc, #620]	; (80017a0 <HAL_GPIO_Init+0x2d4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d046      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001538:	4a99      	ldr	r2, [pc, #612]	; (80017a0 <HAL_GPIO_Init+0x2d4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d85d      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d82a      	bhi.n	8001598 <HAL_GPIO_Init+0xcc>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d859      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <HAL_GPIO_Init+0x80>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015a1 	.word	0x080015a1
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015f5 	.word	0x080015f5
 800155c:	080015fb 	.word	0x080015fb
 8001560:	080015fb 	.word	0x080015fb
 8001564:	080015fb 	.word	0x080015fb
 8001568:	080015fb 	.word	0x080015fb
 800156c:	080015fb 	.word	0x080015fb
 8001570:	080015fb 	.word	0x080015fb
 8001574:	080015fb 	.word	0x080015fb
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015fb 	.word	0x080015fb
 8001588:	080015fb 	.word	0x080015fb
 800158c:	080015fb 	.word	0x080015fb
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	4a82      	ldr	r2, [pc, #520]	; (80017a4 <HAL_GPIO_Init+0x2d8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e029      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e024      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01f      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e01a      	b.n	80015fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e013      	b.n	80015fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e009      	b.n	80015fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e003      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x130>
          break;
 80015fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d801      	bhi.n	8001606 <HAL_GPIO_Init+0x13a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_GPIO_Init+0x13e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d802      	bhi.n	8001618 <HAL_GPIO_Init+0x14c>
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x152>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	3b08      	subs	r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	210f      	movs	r1, #15
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8090 	beq.w	800176c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_GPIO_Init+0x2dc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <HAL_GPIO_Init+0x2e0>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a49      	ldr	r2, [pc, #292]	; (80017b0 <HAL_GPIO_Init+0x2e4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1e0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_GPIO_Init+0x2e8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a47      	ldr	r2, [pc, #284]	; (80017b8 <HAL_GPIO_Init+0x2ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1d8>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016ac:	2300      	movs	r3, #0
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016be:	493b      	ldr	r1, [pc, #236]	; (80017ac <HAL_GPIO_Init+0x2e0>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4933      	ldr	r1, [pc, #204]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	492d      	ldr	r1, [pc, #180]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4929      	ldr	r1, [pc, #164]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4923      	ldr	r1, [pc, #140]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491f      	ldr	r1, [pc, #124]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001740:	4013      	ands	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4919      	ldr	r1, [pc, #100]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4915      	ldr	r1, [pc, #84]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001768:	4013      	ands	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f aeaf 	bne.w	80014e0 <HAL_GPIO_Init+0x14>
  }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	10320000 	.word	0x10320000
 8001794:	10310000 	.word	0x10310000
 8001798:	10220000 	.word	0x10220000
 800179c:	10210000 	.word	0x10210000
 80017a0:	10120000 	.word	0x10120000
 80017a4:	10110000 	.word	0x10110000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fe:	787b      	ldrb	r3, [r7, #1]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180a:	e003      	b.n	8001814 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	041a      	lsls	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43d9      	mvns	r1, r3
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	400b      	ands	r3, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e26c      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8087 	beq.w	800197e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d00c      	beq.n	8001896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800187c:	4b8f      	ldr	r3, [pc, #572]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
 8001888:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b89      	ldr	r3, [pc, #548]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d06c      	beq.n	800197c <HAL_RCC_OscConfig+0x12c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d168      	bne.n	800197c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e246      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x76>
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7f      	ldr	r2, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e02e      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a77      	ldr	r2, [pc, #476]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xbc>
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a71      	ldr	r2, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 800190c:	4b6b      	ldr	r3, [pc, #428]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a67      	ldr	r2, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fcb6 	bl	800129c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fcb2 	bl	800129c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1fa      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe4>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fca2 	bl	800129c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fc9e 	bl	800129c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1e6      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x10c>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d063      	beq.n	8001a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1ba      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4939      	ldr	r1, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	e03a      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc57 	bl	800129c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fc53 	bl	800129c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e19b      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc36 	bl	800129c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc32 	bl	800129c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e17a      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d019      	beq.n	8001a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fc16 	bl	800129c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fc12 	bl	800129c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e15a      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 faa6 	bl	8001fe4 <RCC_Delay>
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fbfc 	bl	800129c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fbf8 	bl	800129c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e140      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	42420000 	.word	0x42420000
 8001ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e9      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a6 	beq.w	8001c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10d      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b94      	ldr	r3, [pc, #592]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a93      	ldr	r2, [pc, #588]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b91      	ldr	r3, [pc, #580]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a8a      	ldr	r2, [pc, #552]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fbb9 	bl	800129c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff fbb5 	bl	800129c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0fd      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b81      	ldr	r3, [pc, #516]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x312>
 8001b54:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	e02d      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001b6a:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a75      	ldr	r2, [pc, #468]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a72      	ldr	r2, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	e01c      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x356>
 8001b8c:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a66      	ldr	r2, [pc, #408]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d015      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fb69 	bl	800129c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff fb65 	bl	800129c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0ab      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ee      	beq.n	8001bce <HAL_RCC_OscConfig+0x37e>
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb53 	bl	800129c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb4f 	bl	800129c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e095      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ee      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8081 	beq.w	8001d3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d061      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d146      	bne.n	8001cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb23 	bl	800129c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb1f 	bl	800129c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e067      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d108      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	492d      	ldr	r1, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a19      	ldr	r1, [r3, #32]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff faf3 	bl	800129c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff faef 	bl	800129c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e037      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x46a>
 8001cd8:	e02f      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fadc 	bl	800129c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff fad8 	bl	800129c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e020      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x498>
 8001d06:	e018      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e013      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	42420060 	.word	0x42420060

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4965      	ldr	r1, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e073      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4936      	ldr	r1, [pc, #216]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7ff fa2c 	bl	800129c <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fa28 	bl	800129c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e053      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1cc>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f98a 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08002868 	.word	0x08002868
 8001f1c:	20000020 	.word	0x20000020
 8001f20:	20000024 	.word	0x20000024

08001f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b490      	push	{r4, r7}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f2c:	1d3c      	adds	r4, r7, #4
 8001f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f34:	f240 2301 	movw	r3, #513	; 0x201
 8001f38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x46>
 8001f62:	e02d      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f66:	623b      	str	r3, [r7, #32]
      break;
 8001f68:	e02d      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f76:	4413      	add	r3, r2
 8001f78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0c5b      	lsrs	r3, r3, #17
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f96:	4413      	add	r3, r2
 8001f98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa2:	fb02 f203 	mul.w	r2, r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	e004      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	623b      	str	r3, [r7, #32]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc2:	623b      	str	r3, [r7, #32]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc90      	pop	{r4, r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08002858 	.word	0x08002858
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	003d0900 	.word	0x003d0900

08001fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <RCC_Delay+0x34>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <RCC_Delay+0x38>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a5b      	lsrs	r3, r3, #9
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002000:	bf00      	nop
  }
  while (Delay --);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	60fa      	str	r2, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <RCC_Delay+0x1c>
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000020 	.word	0x20000020
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e041      	b.n	80020b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff f84e 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f000 fa6a 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d001      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e035      	b.n	8002144 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_TIM_Base_Start_IT+0x90>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_TIM_Base_Start_IT+0x4e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d004      	beq.n	800210e <HAL_TIM_Base_Start_IT+0x4e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_TIM_Base_Start_IT+0x94>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d111      	bne.n	8002132 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b06      	cmp	r3, #6
 800211e:	d010      	beq.n	8002142 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002130:	e007      	b.n	8002142 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400

08002158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b02      	cmp	r3, #2
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0202 	mvn.w	r2, #2
 8002184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f9b1 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f9a4 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f9b3 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0204 	mvn.w	r2, #4
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f987 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f97a 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f989 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b08      	cmp	r3, #8
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0208 	mvn.w	r2, #8
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2204      	movs	r2, #4
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f95d 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f950 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f95f 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b10      	cmp	r3, #16
 8002268:	d122      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b10      	cmp	r3, #16
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0210 	mvn.w	r2, #16
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2208      	movs	r2, #8
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f933 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f926 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f935 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0201 	mvn.w	r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fe1c 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b80      	cmp	r3, #128	; 0x80
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fa67 	bl	80027d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d107      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8f9 	bl	8002526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0220 	mvn.w	r2, #32
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa32 	bl	80027c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIM_ConfigClockSource+0x18>
 800237c:	2302      	movs	r3, #2
 800237e:	e0b3      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x180>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800239e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d03e      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xd0>
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	f200 8087 	bhi.w	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	f000 8085 	beq.w	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d87f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023d0:	2b70      	cmp	r3, #112	; 0x70
 80023d2:	d01a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xa2>
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d87b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d050      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x116>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d877      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023e0:	2b50      	cmp	r3, #80	; 0x50
 80023e2:	d03c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xf6>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d873      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d058      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x136>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d86f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d064      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x156>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d86b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d060      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x156>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d867      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05c      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x156>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d05a      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002408:	e062      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f000 f95c 	bl	80026d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800242c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
      break;
 8002436:	e04e      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f000 f945 	bl	80026d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e03b      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 f8bc 	bl	80025e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f913 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 800247c:	e02b      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 f8da 	bl	8002644 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2160      	movs	r1, #96	; 0x60
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f903 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 800249c:	e01b      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f89c 	bl	80025e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f8f3 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e00b      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 f8ea 	bl	80026a2 <TIM_ITRx_SetConfig>
        break;
 80024ce:	e002      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024d0:	bf00      	nop
 80024d2:	e000      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <TIM_Base_SetConfig+0xac>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <TIM_Base_SetConfig+0xac>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d108      	bne.n	800259c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d103      	bne.n	80025d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400

080025e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f023 030a 	bic.w	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f023 0210 	bic.w	r2, r3, #16
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800266e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	031b      	lsls	r3, r3, #12
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002680:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	621a      	str	r2, [r3, #32]
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f043 0307 	orr.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002728:	2302      	movs	r3, #2
 800272a:	e041      	b.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d004      	beq.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d10c      	bne.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	4313      	orrs	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400

080027c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <__libc_init_array>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2600      	movs	r6, #0
 80027ec:	4d0c      	ldr	r5, [pc, #48]	; (8002820 <__libc_init_array+0x38>)
 80027ee:	4c0d      	ldr	r4, [pc, #52]	; (8002824 <__libc_init_array+0x3c>)
 80027f0:	1b64      	subs	r4, r4, r5
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	42a6      	cmp	r6, r4
 80027f6:	d109      	bne.n	800280c <__libc_init_array+0x24>
 80027f8:	f000 f822 	bl	8002840 <_init>
 80027fc:	2600      	movs	r6, #0
 80027fe:	4d0a      	ldr	r5, [pc, #40]	; (8002828 <__libc_init_array+0x40>)
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <__libc_init_array+0x44>)
 8002802:	1b64      	subs	r4, r4, r5
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	42a6      	cmp	r6, r4
 8002808:	d105      	bne.n	8002816 <__libc_init_array+0x2e>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002810:	4798      	blx	r3
 8002812:	3601      	adds	r6, #1
 8002814:	e7ee      	b.n	80027f4 <__libc_init_array+0xc>
 8002816:	f855 3b04 	ldr.w	r3, [r5], #4
 800281a:	4798      	blx	r3
 800281c:	3601      	adds	r6, #1
 800281e:	e7f2      	b.n	8002806 <__libc_init_array+0x1e>
 8002820:	08002878 	.word	0x08002878
 8002824:	08002878 	.word	0x08002878
 8002828:	08002878 	.word	0x08002878
 800282c:	0800287c 	.word	0x0800287c

08002830 <memset>:
 8002830:	4603      	mov	r3, r0
 8002832:	4402      	add	r2, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
